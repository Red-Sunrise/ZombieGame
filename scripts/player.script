go.property("max_hp", 100)

local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")
local state = require "scripts.state"

function init(self)
	self.hp = self.max_hp
	msg.post(".", "acquire_input_focus")
	msg.post("gui#game_hud", "update_hp", {current_hp = self.hp, max_hp = self.max_hp})
	self.reloading = false
end

function on_input(self, action_id, action)
	local direction = vmath.vector3(0,0,0)
	if action_id == hash("touch") then
		if action.pressed and not self.reloading then
			local current_position = go.get_position()
			local screen_mouse_position = vmath.vector3(0, action.y, 1)
			local world_mouse_position = camera.screen_to_world(CAMERA_ID, screen_mouse_position)
			if world_mouse_position.y >= current_position.y then
				direction.y = 1
			else
				direction.y = -1
			end
			state.player_is_moving = true
			msg.post(".", "start_moving", { direction=direction})
		elseif action.released then
			state.player_is_moving = false
			msg.post(".", "stop_moving")
			msg.post(".", "stop_move_animation")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_reloading") then
		self.reloading = true
		msg.post(".", "start_reload_animation")
	elseif message_id == hash("stop_reloading") then
		self.reloading = false
		if not self.reloading then
			msg.post(".", "stop_move_animation")
		end
	end
	if message_id == hash("damage") then
		self.hp = self.hp - message.amount
		msg.post("gui#game_hud", "update_hp", {current_hp = self.hp, max_hp = self.max_hp})
		if self.hp <= 0 then
			msg.post("gui#game_hud", "game_over")
		end
	end
end