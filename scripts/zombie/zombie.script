go.property("attack_speed", 1)
go.property("hp", 1)
go.property("damage", 1)


local state = require "scripts.state"

local function change_hp_label(current_hp)
	label.set_text("#current_hp_label", current_hp)
end

function init(self)
	self.is_alive = true
	self.attacking = false
	self.attack_timer = 0
	self.maxHP = self.hp
	change_hp_label(self.hp)
end

function update(self, dt)
	if self.attacking then
		self.attack_timer = self.attack_timer + dt
		if self.attack_timer >= self.attack_speed then
			msg.post("main:/player#player", "apply_damage", { amount = self.damage })
			self.attack_timer = 0
		end
	end
end

local function zombie_death_processing(self)
	self.is_alive = false
	change_hp_label("")
	msg.post(".", "stop_moving")
	timer.delay(0.1, false, function() msg.post(".", "start_death_animation") end)
	msg.post("#zombie_collision", "disable")
	timer.delay(1, false, function() go.delete() end)
	state.score = state.score + self.maxHP * self.damage
	msg.post("gui#game_hud", "set_score")
end

local function apply_damage(self, damage_value)
	self.hp = self.hp - damage_value
	change_hp_label(self.hp)
	if self.hp <= 0 and self.is_alive then
		zombie_death_processing(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.group == hash("bullet") then
			local bullet_damage = state.bullet_damage
			apply_damage(self, bullet_damage)
			go.delete(message.other_id)
		end
		if message.group == hash("player") then
			self.attacking = true
			msg.post(".", "stop_moving")
			msg.post(".", "start_attack_animation")
		end
	end

	if message_id == hash("apply_damage") then
		apply_damage(self, message.amount)
	end
end